%==========================================================================
%                               Rhett Huston
%
%                      FILE CREATION DATE: 09/15/2021
%
%                            VAN ROSBAG HANDLER
%
%This is a quick set of programs that will extract lidar data as well as
%positional and velocity information from a rosbag generated by the van
%The primary purpose of this is to begin work on creating a 
%road surface detection algorithm for use in my thesis.
%==========================================================================

clc
clear
close all

disp('==================================================================')
disp('============ VAN ROSBAG HANDLER:        GPS IMU LIDAR ============')
disp('==================================================================')

%% IMPORTING STUFF

% Location of Rosbag File
[bag_file, bag_path]                            = uigetfile('*.bag', 'Select Rosbag');


%% TOPIC SELECT

% Function calling based on desired topics. See TOPIC LIST in a next
% section to see what stuff is available.
% gps_bool                                        = 0; % Complete
% gps_imu_bool                                    = 0; % Complete
% left_camera_bool                                = 0; % Complete
% right_camera_bool                               = 0; % Complete
% novatel_bool                                    = 1; % Partial Complete - missing some minor topic csv export functions, however the important ones are there
% velodyne_single_pcd_export_bool                 = 0; % Complete

disp('Select Topic to Export')
dlg_list                            = {'Novatel_Bool', 'GPS', 'GPS_IMU', 'Left_Camera', 'Right_Camera', 'Velodyne', 'OS1'};
[indx_dlg_list,~]                   = listdlg('ListString', dlg_list,'SelectionMode','single');
disp('Topic selected, Initilizing Rosbag...')
topic = cell2mat(dlg_list(indx_dlg_list));

%% INITIALIZING ROSBAG
%Timing
tic

%Setting Full File Path
bag_path            = fullfile(bag_path, bag_file);

%Initializing rosbag
% bag_init            = rosbag(bag_path);
bag_init            = rosbag(bag_path);

% bag_init            = rosbag(file);

%Timing
disp('End of Rosbag Initilization: ')
toc


%% GPS

if topic == "GPS"

    disp('GPS TOPIC SELECTED')
    
    % Exporting the gps to a CVS (required for plotting)
    gps_cvs_export_bool                             = 1;    
    
    % Plotting the gps 
    gps_plot_bool                                   = 1;
    
    % Safety for plotting
    if gps_cvs_export_bool ~= 1 && gps_plot_bool == 1
        
        warning('gps_cvs_export_bool not set to 1! Plotting disabled')
        
        gps_plot_bool = 0;
        
    end %Safety for plotting
    
    % Confirmation
    fprintf("\nInitiation Complete! \nROSBAG file is: %s \nContinuing on press\n", bag_file)
    pause

    % Running the script
    gps_return = sensor_van_rosbag_gps(bag_init, bag_file, gps_cvs_export_bool, gps_plot_bool);

end


%% GPS IMU

if topic == "GPS_IMU"
    
    % Export the IMU data to a cvs file
    imu_csv_export_bool = 1; 
      
    gps_imu_quat = sensor_van_rosbag_gps_imu(bag_init, bag_file, imu_csv_export_bool);
    
end


%% VELODYNE PCD EXPORT

if topic == "Velodyne"
    
    disp('VELODYNE PCD EXPORT')
    
    % RPM of the LiDAR    
    RPM                                             = 900;
    
    % Device Model (string): VLP16 VLP32C HDL32E HDL64E VLS128
    device_model                                    = "VLP32C";
    
    % Number of channels
    num_channels                                    = 32;
    
    % Export location of the pcd files
    pcd_export_file_path                            = uigetdir('/media/autobuntu','Select Export Folder');
    
%     fprintf("\nInitiation Complete! \nROSBAG file is: %s \nPCD Export folder is: %s \nContinuing on press\n", bag_file, pcd_export_file_path)
    
    pause
    
    sensor_van_rosbag_indvidual_pcd_export(bag_init,RPM,pcd_export_file_path,device_model,num_channels)
    
end

%% OS1 PCD EXPORT

if topic == "OS1"
    
    disp('OS1 VIDEO EXPORT')
    
%     warning('CURRENTLY REQUIRES STACK OF PCDS!')
%     
%     line1 = "PROCEDURE FOR PCD EXPORT:";
%     line2 = "Terminal 1:";
%     line3 = "roslaunch ouster_ros replay.launch bag_file:=/media/autobuntu/chonk/chonk/DATA/chonk_ROSBAG/ouster_test/2023-05-24-16-31-32.bag";
%     line4 = "Terminal 2:";
%     line5 = "rosrun pcl_ros pointcloud_to_pcd input:=/ouster/points output_format:=binary";
%     
%     fprintf('\n%s\n%s\n%s\n%s\n%s\n', line1, line2, line3 ,line4 , line5)
    
    % /ouster/imu
    % /ouster/imu_packets
    % /ouster/lidar_packets
    % /ouster/metadata
    % /ouster/nearir_image
    % /ouster/os_nodelet_mgr/bond
    % /ouster/points
    % /ouster/range_image
    % /ouster/reflec_image
    % /ouster/signal_image
    
    sensor_van_ouster_export(bag_init, bag_file)
    
end

%% LEFT CAMERA

if topic == "Left_Camera"
    
    frame_rate = 30;
    
    sensor_van_rosbag_left_camera(bag_init, bag_file, frame_rate)
    
end


%% RIGHT CAMERA

if topic == "Right_Camera"
    
    frame_rate = 3.3;
    
    sensor_van_rosbag_right_camera(bag_init, bag_file, frame_rate)
    
end


%% NOVATEL

if topic == "Novatel_Bool"

    disp('NOVATEL TOPIC SELECTED')
    
    % Exporting the gps to a CVS (required for plotting)
    novatel_csv_export_bool                             = 1;    

    % Confirmation
    fprintf("\nInitiation Complete! \nROSBAG file is: %s \nContinuing on press\n", bag_file)
    pause

    % Running the script
    novatel_return = sensor_van_rosbag_novatel(bag_init, bag_file, novatel_csv_export_bool);
    
    %% Determine if we plotting today
    
    disp('Select Topic to Export')
    dlg_list                            = {'GeoScatter: Scatter Route & Van', 'Line Route/Scatter Van', 'Line Route & Van', 'Skip Plots'};
    [indx_dlg_list,~]                   = listdlg('ListString', dlg_list,'SelectionMode','single', 'ListSize', [300, 160]);
    
    switch indx_dlg_list
        
        case 1
            
            %% Import Route
            
            [import_route_name, import_route_path] = uigetfile('*.csv','Grab Route Data');

            import_file     = string(import_route_path) + string(import_route_name);

            route           = readtable(import_file);

            lat_route       = table2array(route(:,1));
            lon_route       = table2array(route(:,2));
            
            
            %% Plot Route vs Drive Scatter Plot on map

            route_v_van_geo_fig = figure('DefaultAxesFontSize', 14); 
            geoscatter(lat_route, lon_route, 'Marker', '.', 'MarkerEdgeColor', 'k')
            hold on
            geoscatter(novatel_return.Lat, novatel_return.Lon, 'Marker', 'x', 'MarkerFaceColor','b')
            % geoscatter(lat_van2, lon_van2, 'Marker', 'x', 'MarkerFaceColor','r')
            % geoplot(lat_van, lon_van, 'b', 'LineWidth', 3)
            % hold off
            geobasemap 'none'

            legend({'Route', 'Pacifica'}, 'FontSize', 14)
            
        case 2
            
            %% Import Route

            [import_route_name, import_route_path] = uigetfile('*.mat','Grab Route Data');

            import_file     = string(import_route_path) + string(import_route_name);
            
            load(import_file)
            
            %% Plot Route vs Drive Line Plots
            
            route_line_fig3 = figure('DefaultAxesFontSize', 24); 

            hold all

            for seg_idx = 2:1:length(segment_latlon)

                plot(segment_latlon{seg_idx}(1:end-1,2), segment_latlon{seg_idx}(1:end-1,1), 'k')

            end

            hold on
            
            scatter(novatel_return.Lon, novatel_return.Lat, 'MarkerFaceColor', 'blue', 'MarkerEdgeColor', 'blue', 'Marker', 'x', 'MarkerFaceColor','b')

            axis equal
            
            l = legend({'\color{black} Route','\color{blue} Pacifica'}, 'FontSize', 14, 'FontWeight', 'bold', 'LineWidth', 4, 'Location', 'best');
            l.Interpreter = 'tex';     
            
        case 3
            
             %% Import Route

            [import_route_name, import_route_path] = uigetfile('*.mat','Grab Route Data');

            import_file     = string(import_route_path) + string(import_route_name);
            
            load(import_file)
            
            %% Plot Route vs Drive Line Plots
            
            route_line_fig3 = figure('DefaultAxesFontSize', 24); 

            hold all

            for seg_idx = 2:1:length(segment_latlon)

                plot(segment_latlon{seg_idx}(1:end-1,2), segment_latlon{seg_idx}(1:end-1,1), 'k--', 'LineWidth', 3)

            end

            hold on
            
            plot(novatel_return.Lon, novatel_return.Lat, 'b', 'LineWidth', 2 )

            axis equal
            
            l = legend({'\color{black} Route','\color{blue} Pacifica'}, 'FontSize', 14, 'FontWeight', 'bold', 'LineWidth', 4, 'Location', 'best');
            l.Interpreter = 'tex';
            
            
        case 'Skip'
            
            disp('No plots here!')
            
    end
    
end


%% TOPIC LIST

%Listing all the topics

%Left Camera
% fl_camera_info_topic                            = '/camera_fl/camera_info';
% fl_image_raw_topic                              = '/camera_fl/image_raw';
% fl_comp_topic                                   = '/camera_fl/image_raw/compressed';
% fl_comp_parameter_descriptions_topic            = '/camera_fl/image_raw/compressed/parameter_descriptions';
% fl_comp_parameter_updates_topic                 = '/camera_fl/image_raw/compressed/parameter_updates';
% fl_comp_depth_topic                             = '/camera_fl/image_raw/compressedDepth';
% fl_comp_depth_parameter_descriptions_topic      = '/camera_fl/image_raw/compressedDepth/parameter_descriptions';
% fl_comp_depth_parameter_updates_topic           = '/camera_fl/image_raw/compressedDepth/parameter_updates';
% fl_theora_topic                                 = '/camera_fl/image_raw/theora';
% fl_theora_parameter_descriptions_topic          = '/camera_fl/image_raw/theora/parameter_descriptions';
% fl_theora_parameter_updates_topic               = '/camera_fl/image_raw/theora/parameter_updates';
% fl_parameter_descriptions_topic                 = '/camera_fl/parameter_descriptions';
% fl_parameter_updates_topic                      = '/camera_fl/parameter_updates';

%Right Camera
% fr_camera_info_topic                            = '/camera_fr/camera_info';
% fr_image_raw_topic                              = '/camera_fr/image_raw';
% fr_comp_topic                                   = '/camera_fr/image_raw/compressed';
% fr_comp_parameter_descriptions_topic            = '/camera_fr/image_raw/compressed/parameter_descriptions';
% fr_comp_parameter_updates_topic                 = '/camera_fr/image_raw/compressed/parameter_updates';
% fr_comp_depth_topic                             = '/camera_fr/image_raw/compressedDepth';
% fr_comp_depth_parameter_descriptions_topic      = '/camera_fr/image_raw/compressedDepth/parameter_descriptions';
% fr_comp_depth_parameter_updates_topic           = '/camera_fr/image_raw/compressedDepth/parameter_updates';
% fr_theora_topic                                 = '/camera_fr/image_raw/theora';
% fr_theora_parameter_descriptions_topic          = '/camera_fr/image_raw/theora/parameter_descriptions';
% fr_theora_parameter_updates_topic               = '/camera_fr/image_raw/theora/parameter_updates';
% fr_parameter_descriptions_topic                 = '/camera_fr/parameter_descriptions';
% fr_parameter_updates_topic                      = '/camera_fr/parameter_updates';

%Unknown
% clicked_point_topic                             = '/clicked_point';
% diagnostics_topic                               = '/diagnostics';

%gps
% gps_topic                                       = '/gps/gps';
% gps_imu_topic                                   = '/gps/imu';
% gps_fix_topic                                   = '/gps/fix';

%Pose
% initial_pose_topic                              = '/initialpose';
% joint_states_topic                              = '/joint_states';

%Lidar_Node_Let_Manager
% lnlm_bond_topic                                 = '/lidar_nodelet_manager/bond';
% lnlm_parameter_descriptions                     = '/lidar_nodelet_manager_cloud/parameter_descriptions';
% lnlm_parameter_updates                          = '/lidar_nodelet_manager_cloud/parameter_updates';
% lnlm_driver_parameter_descriptions              = '/lidar_nodelet_manager_driver/parameter_descriptions';
% lnlm_driver_parameter_updates                   = '/lidar_nodelet_manager_driver/parameter_updates';
% lnlm_laserscan_parameter_descriptions           = '/lidar_nodelet_manager_laserscan/parameter_descriptions';
% lnlm_laserscan_parameter_updates                = '/lidar_nodelet_manager_laserscan/parameter_updates';

%Goal
% move_goal_topic                                 = '/move_base_simple/goal';

%Novatel
% novatel_bestpos_topic                           = '/novatel/oem7/bestpos';
% novatel_corrimu_topic                           = '/novatel/oem7/corrimu';
% novatel_driver_bond_topic                       = '/novatel/oem7/driver/bond';
% novatel_inspva_topic                            = '/novatel/oem7/inspva';
% novatel_inspvax_topic                           = '/novatel/oem7/inspvax';
% novatel_insstdev_topic                          = '/novatel/oem7/insstdev';
% novatel_odom_topic                              = '/novatel/oem7/odom';
% novatel_oem7raw_topic                           = '/novatel/oem7/oem7raw';
% novatel_time_topic                              = '/novatel/oem7/time';

%Radar
% rad_vehicle_motion_topic                        = '/radar_fc/as_rx/vehicle_motion';
% rad_objects_topic                               = '/radar_fc/as_tx/objects';
% rad_radar_error_status_topic                    = '/radar_fc/as_tx/radar_error_status';
% rad_radar_markers_topic                         = '/radar_fc/as_tx/radar_markers';
% rad_radar_markers_array_topic                   = '/radar_fc/as_tx/radar_markers_array';
% rad_radar_status_topic                          = '/radar_fc/as_tx/radar_status';
% rad_radar_tracks_topic                          = '/radar_fc/as_tx/radar_tracks';
% rad_can_rx_topic                                = '/radar_fc/can_rx';
% rad_can_tx_topic                                = '/radar_fc/can_tx';
% rad_vehicle1_msgs_topic                         = '/radar_fc/parsed_rx/vehicle1_msgs';
% rad_vehicle2_msgs_topic                         = '/radar_fc/parsed_rx/vehicle2_msgs';
% rad_vehicle3_msgs_topic                         = '/radar_fc/parsed_rx/vehicle3_msgs';
% rad_vehicle4_msgs_topic                         = '/radar_fc/parsed_rx/vehicle4_msgs';
% rad_vehicle5_msgs_topic                         = '/radar_fc/parsed_rx/vehicle5_msgs';
% rad_radarstatus1_topic                          = '/radar_fc/parsed_tx/radarstatus1';
% rad_radarstatus2_topic                          = '/radar_fc/parsed_tx/radarstatus2';
% rad_radarstatus3_topic                          = '/radar_fc/parsed_tx/radarstatus3';
% rad_radarstatus4_topic                          = '/radar_fc/parsed_tx/radarstatus4';
% rad_radarstatus5_topic                          = '/radar_fc/parsed_tx/radarstatus5';
% rad_radarstatus6_topic                          = '/radar_fc/parsed_tx/radarstatus6';
% rad_radarstatus7_topic                          = '/radar_fc/parsed_tx/radarstatus7';
% rad_radarstatus8_topic                          = '/radar_fc/parsed_tx/radarstatus8';
% rad_radarstatus9_topic                          = '/radar_fc/parsed_tx/radarstatus9';
% rad_radartrack_topic                            = '/radar_fc/parsed_tx/radartrack';
% rad_radarvalid1_topic                           = '/radar_fc/parsed_tx/radarvalid1';
% rad_radarvalid2_topic                           = '/radar_fc/parsed_tx/radarvalid2';
% rad_trackmotionpower_topic                      = '/radar_fc/parsed_tx/trackmotionpower';

%rosout
% rosout_topic                                    = '/rosout';
% rosout_agg                                      = '/rosout_agg';

%rviz
% rviz_param_desc_topic                           = '/rviz/theora/parameter_descriptions';
% rviz_param_update_topic                         = '/rviz/theora/parameter_updates';

%scan
% scan_topic                                      = '/scan';

%tf
% tf_topic                                        = '/tf';
% tf_static_topic                                 = '/tf_static';

%Velodyne
% velodyne_packets_topic                          = '/velodyne_packets';
% velodyne_points_topic                           = '/velodyne_points';






