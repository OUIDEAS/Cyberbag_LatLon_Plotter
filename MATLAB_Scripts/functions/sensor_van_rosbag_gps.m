%==========================================================================
%                               Rhett Huston
%
%                      FILE CREATION DATE: 09/15/2021
%
%                           ROSBAG HANDLER: GPS
%
%This is a quick set of programs that will extract gps positional 
%information from a rosbag generated by the van The primary purpose of 
%this is to begin work on creating a road surface detection algorithm for 
%use in my thesis.
%==========================================================================

function gps_return = sensor_van_rosbag_gps(bag_init, bag_file, gps_cvs_export_bool, gps_plot_bool)

    disp('Entered the sensor_van_rosbag_gps.m script')

    %% INITIATION
    
    %Timing
    tic

    % Topics
    gps_topic       = '/gps/gps';

    % Selecting the bag
    gps_bag         = select(bag_init, 'Topic', gps_topic);
    
    disp('Reading Messages')

    % Creating Structure
    gps_struct      = readMessages(gps_bag,'DataFormat','struct');
    
    %% GPS GRAB
    
    % Initilizing Vars
    init_length     = zeros(1,length(gps_struct));
    gps_time        = init_length;
%     gps_stamp       = init_length;
    gps_lat         = init_length;
    gps_lon         = init_length;
    gps_alt         = init_length;
    gps_sat_used    = init_length;
    gps_err         = init_length;
    gps_err_vert    = init_length;
    gps_err_hor     = init_length;
    gps_err_track   = init_length;
    gps_err_climb   = init_length;
    gps_pitch       = init_length;
    gps_roll        = init_length;
    gps_speed       = init_length;

    for i = 1:length(gps_struct)
        
%         gps_stamp(i)        = double(novatel_bestpos_struct{1}.Header.Stamp.Sec) + double(novatel_bestpos_struct{1}.Header.Stamp.Nsec)*(10^-9);
        
        % Time Stamp
        gps_time(i)         = double(gps_struct{i}.Header.Stamp.Sec) + double(gps_struct{i}.Header.Stamp.Nsec)*(10^-9);
        
        % Lat/Lon/Alt/Sats
        gps_lat(i)          = gps_struct{i}.Latitude;
        gps_lon(i)          = gps_struct{i}.Longitude;
        gps_alt(i)          = gps_struct{i}.Altitude;
        gps_sat_used(i)     = gps_struct{i}.Status.SatellitesUsed;

        % Err
        gps_err(i)          = gps_struct{i}.Err;
        gps_err_vert(i)     = gps_struct{i}.ErrVert;
        gps_err_hor(i)      = gps_struct{i}.ErrHorz;
        gps_err_track(i)    = gps_struct{i}.ErrTrack;
        gps_err_climb(i)    = gps_struct{i}.ErrClimb;
        
        % Pitch/Roll
        gps_pitch(i)        = gps_struct{i}.Pitch;
        gps_roll(i)         = gps_struct{i}.Roll;
        
        % Vel
        gps_speed(i)        = gps_struct{i}.Speed;

    end %Assigning gps strucutre values to seprate arrays
    
    % What gets sent back
    gps_return = [gps_lat' gps_lon'];

    %% CVS EXPORT
    if gps_cvs_export_bool == 1

        gps_file_name       = append('gps_topic_', bag_file);
        gps_file_type       = '.csv';
        gps_full_out_name   = append(gps_file_name, gps_file_type);
        
        %GPS Export
        GPS_OUT             = [gps_time' gps_lat' gps_lon' gps_alt' gps_sat_used'];
        
        %Exporing CSV
        writematrix(GPS_OUT,gps_full_out_name)
        
        %Exporting CSV with the headers
%         gps_file_name_with_header = append('gps_topic_with_header', bag_file);
%         gps_full_out_name_with_header   = append(gps_file_name_with_header, gps_file_type);
%         Time = gps_time';
%         Lat = gps_lat';
%         Lon = gps_lon';
%         Alt = gps_alt';
%         NumSat = gps_sat_used';
%         varNames = {'Time','Lat','Lon','Alt','NumSat'};
%         GPS_OUT_W_H         = table(Time,Lat,Lon,Alt,NumSat,'VariableNames',varNames);
%         writetable(GPS_OUT_W_H,gps_full_out_name_with_header)
        
        if gps_plot_bool == 1
            
            gps_plotter(gps_full_out_name)
            
        end % Plotting
        
    end % CVS Export
    
    %Timing
    toc
    disp('END OF GPS - YAY')
    
end % End Function

%{'  uint32 Seq↵  Time Stamp↵  char FrameId↵gps_common/GPSStatus Status↵  
%std_msgs/Header Header↵    uint32 Seq↵    Time Stamp↵    char FrameId↵  
%uint16 SatellitesUsed↵  int32[] SatelliteUsedPrn↵  uint16 SatellitesVisible↵  
%int32[] SatelliteVisiblePrn↵  int32[] SatelliteVisibleZ↵  int32[] SatelliteVisibleAzimuth↵  
%int32[] SatelliteVisibleSnr↵  int16 STATUSNOFIX↵  int16 STATUSFIX↵  int16 STATUSSBASFIX↵  
%int16 STATUSGBASFIX↵  int16 STATUSDGPSFIX↵  int16 STATUSWAASFIX↵  int16 Status↵  
%uint16 SOURCENONE↵  uint16 SOURCEGPS↵  uint16 SOURCEPOINTS↵  uint16 SOURCEDOPPLER↵  
%uint16 SOURCEALTIMETER↵  uint16 SOURCEMAGNETIC↵  uint16 SOURCEGYRO↵  uint16 SOURCEACCEL↵  
%uint16 MotionSource↵  uint16 OrientationSource↵  uint16 PositionSource↵double 

%Latitude↵double Longitude↵double Altitude↵double Track↵double Speed↵double Climb↵double 
%Pitch↵double Roll↵double Dip↵double Time↵double Gdop↵double Pdop↵double Hdop↵double 
%Vdop↵double Tdop↵double Err↵double ErrHorz↵double ErrVert↵double ErrTrack↵double 
%ErrSpeed↵double ErrClimb↵double ErrTime↵double ErrPitch↵double ErrRoll↵double 
%ErrDip↵double[9] PositionCovariance↵uint8 COVARIANCETYPEUNKNOWN↵uint8 COVARIANCETYPEAPPROXIMATED↵uint8 
%COVARIANCETYPEDIAGONALKNOWN↵uint8 COVARIANCETYPEKNOWN↵uint8 PositionCovarianceType↵'}
